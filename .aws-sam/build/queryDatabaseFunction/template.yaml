# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  exifProcessor

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  vpcStackName:
    Default: rds-mysql-vpc
    Description: VPC and database stack name
    Type: String
  secretName:
    Default: rds-mysql-admin
    Description: Database password secret name
    Type: String
  VpcId:
    Type: String
    Description: ID of the VPC
    Default: vpc-0e8d3c6321c584886

  SubnetIdOne:
    Type: String
    Description: ID of the first subnet
    Default: subnet-06445f8d648dae8a3

  SubnetIdTwo:
    Type: String
    Description: ID of the second subnet
    Default: subnet-048491907c4aca4db

  SecurityGroupIdOne:
    Type: String
    Description: ID of the first security group
    Default: sg-04be949c633f462d1

  SecurityGroupIdTwo:
    Type: String
    Description: ID of the second security group
    Default: sg-0267e5dc92e0f3641

Globals:
  Function:
    Runtime: nodejs18.x
    Architectures:
      - x86_64
    MemorySize: 128
    Timeout: 100
    Environment:
      Variables:
        RDS_HOSTNAME: tfm.cixbxlx3mnlm.us-east-1.rds.amazonaws.com
        RDS_USERNAME: admin
        RDS_PORT: '3306' # Las variables de entorno son strings, asegúrate de que los números estén entre comillas
        RDS_DBNAME: exifms
        RDS_PASSWORD: k6_gjqq{K}nzXgbl{?KNM9]G.$rB
        ENCRYPTION_KEY: 86b2f53b7dbc8d1f35c616cd7441cc274bea23e63756e200dbf539aa664ecd7d
    VpcConfig:
      SecurityGroupIds:
        - sg-04be949c633f462d1
        - sg-0267e5dc92e0f3641
      SubnetIds:
        - subnet-06445f8d648dae8a3
        - subnet-048491907c4aca4db

  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"
      # AllowCredentials: true  Uncomment only if you choose a specific origin instead of the * wildcard.

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: hello-from-lambda.js
  processExifFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/databaseHandler.processImageMetadataHandler
      Description: A Lambda function that returns a static string.
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:PutObject'
              Resource:
                - "arn:aws:s3:::images-tfm2/*"
                - "arn:aws:s3:::images-tfm2"
       # Give Lambda basic execution Permission to the helloFromLambda
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy: 
            BucketName: !Ref S3Bucket
        - S3WritePolicy: 
            BucketName: !Ref S3Bucket
      Events:
        ProcessExifEvent:
          Type: Api
          Properties:
            Path: /processExif
            Method: post

  imageMetadataRemovalFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/exifHandler.deleteMetadataHandler
      Description: A Lambda function that deletes the metadata of an image and upload it in a new file.
      Policies:
        # Give Lambda basic execution Permission to the helloFromLambda
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy: 
            BucketName: !Ref S3Bucket
        - S3WritePolicy: 
            BucketName: !Ref S3Bucket

      Events:
        DeleteExifMetadataEvent:
          Type: Api
          Properties:
            Path: /deleteExif
            Method: post

  getImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/exifHandler.getImageHandler
      Description: A Lambda function that gets the signed image url to download
      Policies:
        # Give Lambda basic execution Permission to the helloFromLambda
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy: 
            BucketName: !Ref S3Bucket
        - S3WritePolicy: 
            BucketName: !Ref S3Bucket
      Events:
        GetImageEvent:
          Type: Api
          Properties:
            Path: /getImage
            Method: post
  
  imageUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/exifHandler.uploadImageHandler  # Asegúrate de reemplazar 'tuArchivo' con el nombre real de tu archivo
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:PutObject'
              Resource:
                - "arn:aws:s3:::images-tfm2/*"
                - "arn:aws:s3:::images-tfm2"
       # Give Lambda basic execution Permission to the helloFromLambda
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy: 
            BucketName: !Ref S3Bucket
        - S3WritePolicy: 
            BucketName: !Ref S3Bucket
      Events:
        UploadImageEvent:
          Type: Api
          Properties:
            Path: /uploadImage
            Method: post
  
  queryDatabaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/databaseHandler.queryDatabaseHandler
      Environment:
          Variables:
            RDS_HOSTNAME: tfm.cixbxlx3mnlm.us-east-1.rds.amazonaws.com
            RDS_USERNAME: admin
            RDS_PORT: 3306
            RDS_DBNAME: exifms
            RDS_PASSWORD: test
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:PutObject'
              Resource:
                - "arn:aws:s3:::images-tfm2/*"
                - "arn:aws:s3:::images-tfm2"
       # Give Lambda basic execution Permission to the helloFromLambda
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy: 
            BucketName: !Ref S3Bucket
        - S3WritePolicy: 
            BucketName: !Ref S3Bucket
      VpcConfig:
        SecurityGroupIds:
          - sg-04be949c633f462d1
          - sg-0267e5dc92e0f3641
        SubnetIds:
          - subnet-06445f8d648dae8a3
          - subnet-048491907c4aca4db
      Role: !GetAtt role.Arn
      Events:
        UploadImageEvent:
          Type: Api
          Properties:
            Path: /database/query
            Method: post

  createImageS3Function:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/databaseHandler.createImageS3Handler
      Role: !GetAtt role.Arn
      Policies:
      - Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:PutObject'
            Resource:
              - 'arn:aws:s3:::images-tfm2/*'
              - 'arn:aws:s3:::images-tfm2'
      - AWSLambdaBasicExecutionRole
      - S3ReadPolicy: 
          BucketName: !Ref S3Bucket
      - S3WritePolicy: 
          BucketName: !Ref S3Bucket
      Events:
        UploadS3ImageEvent:
          Type: Api
          Properties:
            Path: /images/create
            Method: post
  
  encryptImageMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/databaseHandler.encryptImageMetadataHandler
      Description: A Lambda function that returns a static string.
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:PutObject'
              Resource:
                - "arn:aws:s3:::images-tfm2/*"
                - "arn:aws:s3:::images-tfm2"
       # Give Lambda basic execution Permission to the helloFromLambda
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy: 
            BucketName: !Ref S3Bucket
        - S3WritePolicy: 
            BucketName: !Ref S3Bucket
      Events:
        ProcessExifEvent:
          Type: Api
          Properties:
            Path: /encryptMetadata
            Method: post
  
  getImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/databaseHandler.getImagesHandler
      Description: A Lambda function that returns all images data.
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:PutObject'
              Resource:
                - "arn:aws:s3:::images-tfm2/*"
                - "arn:aws:s3:::images-tfm2"
       # Give Lambda basic execution Permission to the helloFromLambda
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy: 
            BucketName: !Ref S3Bucket
        - S3WritePolicy: 
            BucketName: !Ref S3Bucket
      Events:
        ProcessExifEvent:
          Type: Api
          Properties:
            Path: /getImages
            Method: get
    
  role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: rds-iamauth
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'rds-db:connect'
                Resource: '*'
      Path: /service-role/

  # Definir el bucket de S3 si es necesario
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: images-tfm2

Outputs:
  ExifRemovalApi:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/remove-metadata/"