AWSTemplateFormatVersion: '2010-09-09'
Description: exifProcessor
Transform:
- AWS::Serverless-2016-10-31
Parameters:
  vpcStackName:
    Default: rds-mysql-vpc
    Description: VPC and database stack name
    Type: String
  secretName:
    Default: rds-mysql-admin
    Description: Database password secret name
    Type: String
  VpcId:
    Type: String
    Description: ID of the VPC
    Default: vpc-0e8d3c6321c584886
  SubnetIdOne:
    Type: String
    Description: ID of the first subnet
    Default: subnet-06445f8d648dae8a3
  SubnetIdTwo:
    Type: String
    Description: ID of the second subnet
    Default: subnet-048491907c4aca4db
  SecurityGroupIdOne:
    Type: String
    Description: ID of the first security group
    Default: sg-04be949c633f462d1
  SecurityGroupIdTwo:
    Type: String
    Description: ID of the second security group
    Default: sg-0267e5dc92e0f3641
Globals:
  Function:
    Runtime: nodejs18.x
    Architectures:
    - x86_64
    MemorySize: 128
    Timeout: 100
    Environment:
      Variables:
        RDS_HOSTNAME: tfm.cixbxlx3mnlm.us-east-1.rds.amazonaws.com
        RDS_USERNAME: admin
        RDS_PORT: '3306'
        RDS_DBNAME: exifms
        RDS_PASSWORD: k6_gjqq{K}nzXgbl{?KNM9]G.$rB
        ENCRYPTION_KEY: 86b2f53b7dbc8d1f35c616cd7441cc274bea23e63756e200dbf539aa664ecd7d
    VpcConfig:
      SecurityGroupIds:
      - sg-04be949c633f462d1
      - sg-0267e5dc92e0f3641
      SubnetIds:
      - subnet-06445f8d648dae8a3
      - subnet-048491907c4aca4db
  Api:
    Cors:
      AllowMethods: '''GET,POST,OPTIONS'''
      AllowHeaders: '''content-type,Authorization'''
      AllowOrigin: '''*'''
Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: MyAPI
      StageName: prod
      Cors:
        AllowMethods: '''OPTIONS,POST'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin: '''*'''
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            Type: COGNITO_USER_POOLS
            UserPoolArn:
              Fn::GetAtt:
              - CognitoUserPool
              - Arn
        AddDefaultAuthorizerToCorsPreflight: false
        ApiKeyRequired: false
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: exifProcessorUserPool
      Schema:
      - Name: email
        Required: true
        Mutable: false
        AttributeDataType: String
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      AutoVerifiedAttributes:
      - email
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: CognitoUserPool
      ClientName: exifProcessorAppClient
      GenerateSecret: false
      ExplicitAuthFlows:
      - ALLOW_USER_SRP_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      - ALLOW_USER_PASSWORD_AUTH
  CognitoApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: q8onxhk818
      ProviderARNs:
      - Fn::GetAtt:
        - CognitoUserPool
        - Arn
  loginFunction2:
    Type: AWS::Serverless::Function
    Properties:
      VpcConfig:
        SecurityGroupIds: []
        SubnetIds: []
      Handler: src/handlers/databaseHandler.loginHandler
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - cognito-idp:AdminInitiateAuth
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminSetUserPassword
          - cognito-idp:InitiateAuth
          - cognito-idp:RespondToAuthChallenge
          Resource: '*'
      - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          YOUR_CLIENT_ID: YOUR_CLIENT_ID_VALUE
          YOUR_SECRET_KEY: YOUR_SECRET_KEY_VALUE
      Events:
        LoginApi:
          Type: Api
          Properties:
            Path: /login
            Method: post
      CodeUri: loginFunction2
    Metadata:
      SamResourceId: loginFunction2
  processExifFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/databaseHandler.processImageMetadataHandler
      Description: A Lambda function that returns a static string.
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
          - arn:aws:s3:::images-tfm2/*
          - arn:aws:s3:::images-tfm2
      - AWSLambdaBasicExecutionRole
      - S3ReadPolicy:
          BucketName:
            Ref: S3Bucket
      - S3WritePolicy:
          BucketName:
            Ref: S3Bucket
      Events:
        ProcessExifEvent:
          Type: Api
          Properties:
            Path: /processExif
            Method: post
      CodeUri: processExifFunction
    Metadata:
      SamResourceId: processExifFunction
  imageMetadataRemovalFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/exifHandler.deleteMetadataHandler
      Description: A Lambda function that deletes the metadata of an image and upload
        it in a new file.
      Policies:
      - AWSLambdaBasicExecutionRole
      - S3ReadPolicy:
          BucketName:
            Ref: S3Bucket
      - S3WritePolicy:
          BucketName:
            Ref: S3Bucket
      Events:
        DeleteExifMetadataEvent:
          Type: Api
          Properties:
            Path: /deleteExif
            Method: post
      CodeUri: imageMetadataRemovalFunction
    Metadata:
      SamResourceId: imageMetadataRemovalFunction
  getImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/exifHandler.getImageHandler
      Description: A Lambda function that gets the signed image url to download
      Policies:
      - AWSLambdaBasicExecutionRole
      - S3ReadPolicy:
          BucketName:
            Ref: S3Bucket
      - S3WritePolicy:
          BucketName:
            Ref: S3Bucket
      Events:
        GetImageEvent:
          Type: Api
          Properties:
            Path: /getImage
            Method: post
            RestApiId:
              Ref: MyApi
            Auth:
              Authorizer: MyCognitoAuthorizer
      CodeUri: getImageFunction
    Metadata:
      SamResourceId: getImageFunction
  imageUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/exifHandler.uploadImageHandler
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
          - arn:aws:s3:::images-tfm2/*
          - arn:aws:s3:::images-tfm2
      - AWSLambdaBasicExecutionRole
      - S3ReadPolicy:
          BucketName:
            Ref: S3Bucket
      - S3WritePolicy:
          BucketName:
            Ref: S3Bucket
      Events:
        UploadImageEvent:
          Type: Api
          Properties:
            Path: /uploadImage
            Method: post
      CodeUri: imageUploadFunction
    Metadata:
      SamResourceId: imageUploadFunction
  queryDatabaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/databaseHandler.queryDatabaseHandler
      Environment:
        Variables:
          RDS_HOSTNAME: tfm.cixbxlx3mnlm.us-east-1.rds.amazonaws.com
          RDS_USERNAME: admin
          RDS_PORT: 3306
          RDS_DBNAME: exifms
          RDS_PASSWORD: test
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
          - arn:aws:s3:::images-tfm2/*
          - arn:aws:s3:::images-tfm2
      - AWSLambdaBasicExecutionRole
      - S3ReadPolicy:
          BucketName:
            Ref: S3Bucket
      - S3WritePolicy:
          BucketName:
            Ref: S3Bucket
      VpcConfig:
        SecurityGroupIds:
        - sg-04be949c633f462d1
        - sg-0267e5dc92e0f3641
        SubnetIds:
        - subnet-06445f8d648dae8a3
        - subnet-048491907c4aca4db
      Role:
        Fn::GetAtt:
        - role
        - Arn
      Events:
        UploadImageEvent:
          Type: Api
          Properties:
            Path: /database/query
            Method: post
      CodeUri: queryDatabaseFunction
    Metadata:
      SamResourceId: queryDatabaseFunction
  createImageS3Function:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/databaseHandler.createImageS3Handler
      Role:
        Fn::GetAtt:
        - role
        - Arn
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
          - arn:aws:s3:::images-tfm2/*
          - arn:aws:s3:::images-tfm2
      - AWSLambdaBasicExecutionRole
      - S3ReadPolicy:
          BucketName:
            Ref: S3Bucket
      - S3WritePolicy:
          BucketName:
            Ref: S3Bucket
      Events:
        UploadS3ImageEvent:
          Type: Api
          Properties:
            Path: /images/create
            Method: post
      CodeUri: createImageS3Function
    Metadata:
      SamResourceId: createImageS3Function
  encryptImageMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/databaseHandler.encryptImageMetadataHandler
      Description: A Lambda function that returns a static string.
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
          - arn:aws:s3:::images-tfm2/*
          - arn:aws:s3:::images-tfm2
      - AWSLambdaBasicExecutionRole
      - S3ReadPolicy:
          BucketName:
            Ref: S3Bucket
      - S3WritePolicy:
          BucketName:
            Ref: S3Bucket
      Events:
        ProcessExifEvent:
          Type: Api
          Properties:
            Path: /encryptMetadata
            Method: post
      CodeUri: encryptImageMetadataFunction
    Metadata:
      SamResourceId: encryptImageMetadataFunction
  getImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/databaseHandler.getImagesHandler
      Description: A Lambda function that returns all images data.
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
          - arn:aws:s3:::images-tfm2/*
          - arn:aws:s3:::images-tfm2
      - AWSLambdaBasicExecutionRole
      - S3ReadPolicy:
          BucketName:
            Ref: S3Bucket
      - S3WritePolicy:
          BucketName:
            Ref: S3Bucket
      Events:
        ProcessExifEvent:
          Type: Api
          Properties:
            Path: /getImages
            Method: get
      CodeUri: getImagesFunction
    Metadata:
      SamResourceId: getImagesFunction
  role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
      - PolicyName: rds-iamauth
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: rds-db:connect
            Resource: '*'
      Path: /service-role/
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: images-tfm2
Outputs:
  ExifRemovalApi:
    Description: API Gateway endpoint URL for Prod stage
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/remove-metadata/
