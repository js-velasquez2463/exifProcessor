AWSTemplateFormatVersion: '2010-09-09'
Description: exifProcessor
Transform:
- AWS::Serverless-2016-10-31
Parameters:
  vpcStackName:
    Default: rds-mysql-vpc
    Description: VPC and database stack name
    Type: String
  secretName:
    Default: rds-mysql-admin
    Description: Database password secret name
    Type: String
  VpcId:
    Type: String
    Description: ID of the VPC
    Default: vpc-0e8d3c6321c584886
  SubnetIdOne:
    Type: String
    Description: ID of the first subnet
    Default: subnet-06445f8d648dae8a3
  SubnetIdTwo:
    Type: String
    Description: ID of the second subnet
    Default: subnet-048491907c4aca4db
  SecurityGroupIdOne:
    Type: String
    Description: ID of the first security group
    Default: sg-04be949c633f462d1
  SecurityGroupIdTwo:
    Type: String
    Description: ID of the second security group
    Default: sg-0267e5dc92e0f3641
Resources:
  helloFromLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/exifHandler.getMetadataHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A Lambda function that returns a static string.
      Policies:
      - AWSLambdaBasicExecutionRole
      - S3ReadPolicy:
          BucketName: images-tfm2
      - Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:ListBucket
          Resource:
          - arn:aws:s3:::images-tfm2/*
          - arn:aws:s3:::images-tfm2
      Events:
        ProcessExifEvent:
          Type: Api
          Properties:
            Path: /processExif
            Method: post
      CodeUri: helloFromLambdaFunction
    Metadata:
      SamResourceId: helloFromLambdaFunction
  imageMetadataRemovalFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/exifHandler.deleteMetadataHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A Lambda function that deletes the metadata of an image and upload
        it in a new file.
      Policies:
      - AWSLambdaBasicExecutionRole
      - S3ReadPolicy:
          BucketName:
            Ref: S3Bucket
      - S3WritePolicy:
          BucketName:
            Ref: S3Bucket
      Events:
        DeleteExifMetadataEvent:
          Type: Api
          Properties:
            Path: /deleteExif
            Method: post
      CodeUri: imageMetadataRemovalFunction
    Metadata:
      SamResourceId: imageMetadataRemovalFunction
  getImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/exifHandler.getImageHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A Lambda function that gets the signed image url to download
      Policies:
      - AWSLambdaBasicExecutionRole
      - S3ReadPolicy:
          BucketName:
            Ref: S3Bucket
      - S3WritePolicy:
          BucketName:
            Ref: S3Bucket
      Events:
        GetImageEvent:
          Type: Api
          Properties:
            Path: /getImage
            Method: post
      CodeUri: getImageFunction
    Metadata:
      SamResourceId: getImageFunction
  imageUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/exifHandler.uploadImageHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
          - arn:aws:s3:::images-tfm2/*
          - arn:aws:s3:::images-tfm2
      - AWSLambdaBasicExecutionRole
      - S3ReadPolicy:
          BucketName:
            Ref: S3Bucket
      - S3WritePolicy:
          BucketName:
            Ref: S3Bucket
      Events:
        UploadImageEvent:
          Type: Api
          Properties:
            Path: /uploadImage
            Method: post
      CodeUri: imageUploadFunction
    Metadata:
      SamResourceId: imageUploadFunction
  createDatabaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/databaseHandler.queryDatabaseHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Environment:
        Variables:
          RDS_HOSTNAME: proxy-1706438267879-tfm.proxy-cixbxlx3mnlm.us-east-1.rds.amazonaws.com
          RDS_USERNAME: admin
          RDS_PORT: 3306
          RDS_DBNAME: exifms
          RDS_PASSWORD: test
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
          - arn:aws:s3:::images-tfm2/*
          - arn:aws:s3:::images-tfm2
      - AWSLambdaBasicExecutionRole
      - S3ReadPolicy:
          BucketName:
            Ref: S3Bucket
      - S3WritePolicy:
          BucketName:
            Ref: S3Bucket
      VpcConfig:
        SecurityGroupIds:
        - sg-04be949c633f462d1
        - sg-0267e5dc92e0f3641
        SubnetIds:
        - subnet-06445f8d648dae8a3
        - subnet-048491907c4aca4db
      Role:
        Fn::GetAtt:
        - role
        - Arn
      Events:
        UploadImageEvent:
          Type: Api
          Properties:
            Path: /database/create
            Method: post
      CodeUri: createDatabaseFunction
    Metadata:
      SamResourceId: createDatabaseFunction
  role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
      - PolicyName: rds-iamauth
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: rds-db:connect
            Resource: '*'
      Path: /service-role/
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: images-tfm2
Outputs:
  ExifRemovalApi:
    Description: API Gateway endpoint URL for Prod stage
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/remove-metadata/
